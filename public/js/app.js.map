{"version":3,"sources":["rentApp.js","controllers/QuotesController.js","services/datesService.js","services/quotesService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzhhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var rentApp = angular.module('rentApp',['ngMaterial','angularMoment','quotesService','datesService'])\n\n.config(function($interpolateProvider, $mdDateLocaleProvider){\n\t$interpolateProvider.startSymbol('{[{').endSymbol('}]}');\n\n    $mdDateLocaleProvider.formatDate = function(date) {\n        return date ? moment(date).format('DD-MM-YYYY') : '';\n    };\n\n    $mdDateLocaleProvider.parseDate = function(dateString) {\n        var m = moment(dateString, 'DD-MM-YYYY', true);\n        return m.isValid() ? m.toDate() : new Date(NaN);\n    };\n\n})\n.filter('range', function() {\n    return function(input, min, max) {\n        min = parseInt(min); //Make string input int\n        max = parseInt(max);\n        for (var i=min; i<max; i++)\n\n            input.push(i);\n        return input;\n    };\n});\n","rentApp.controller('QuotesController',['$http', 'moment', 'rentQuote', 'rentDate',function($http, moment, rentQuote, rentDate){\n\n    var vm = this;\n\n    vm.months =\n    {\"1\" :\n      { \"id\"    :     1,\n        \"name\"  :     \"January\"\n      },\n\n    \"2\" :\n      { \"id\"    :     2,\n        \"name\"  :     \"February\"\n      },\n    \"3\" :\n      { \"id\"    :     3,\n        \"name\"  :     \"March\"\n      },\n    \"4\" :\n      { \"id\"    :     4,\n        \"name\"  :     \"April\"\n      },\n    \"5\" :\n      { \"id\"    :     5,\n        \"name\"  :     \"May\"\n      },\n    \"6\" :\n      { \"id\"    :     6,\n        \"name\"  :     \"June\"\n      },\n    \"7\" :\n      { \"id\"    :     7,\n        \"name\"  :     \"July\"\n      },\n    \"8\" :\n      { \"id\"    :     8,\n        \"name\"  :     \"August\"\n      },\n    \"9\" :\n      { \"id\"    :     9,\n        \"name\"  :     \"September\"\n      },\n    \"10\" :\n      { \"id\"    :     10,\n        \"name\"  :     \"October\"\n      },\n    \"11\" :\n      { \"id\"    :     11,\n        \"name\"  :     \"November\"\n      },\n    \"12\" :\n      { \"id\"    :     12,\n        \"name\"  :     \"December\"\n      }\n    };\n\n    // object to hold all the data for the new quote form\n    vm.quoteData = {};\n\n    vm.dates = {\n        start_date : new Date(),\n        end_date : new Date(),\n        start_date_min : new Date(),\n        end_date_min : new Date()\n    };\n\n    vm.oneDayOnly = function ($event, value) {\n        console.log('oneDayOnly | $event -> ', $event);\n        var checkbox = $event.target;\n        var action = (checkbox.checked ? 'add' : 'remove');\n        vm.updateToggleSelection(action, value);\n\n  };\n\n  vm.updateToggleSelection = function(action, value) {\n    if(action =='add') {\n       value = true;\n        vm.dates.end_date = vm.dates.start_date;\n     }\n\n    if(action == 'remove') {\n     value = false;\n     }\n        console.log('oneDayOnly | vm.dates -> ', vm.dates);\n };\n//        vm.oneDay = true;\n//\n\n\n    vm.checkDates = function(myControl){\n        vm.dateResetShow(vm.dates.start_date);\n        console.log('checkDates -> ', myControl);\n        if (myControl === 'start')\n        {\n            dates = rentDate.compareDates.start(vm.dates);\n            console.log(' checkDates | dates -> ', dates);\n//            vm.quoteData.end_date = dates.endDate;\n//            vm.end_date_min = dates.endDateMin;\n        }\n        else\n        {\n//            var dates = {};\n//            dates = rentDate.compareDates.end(vm.quoteData.start_date, vm.quoteData.end_date);\n//            vm.quoteData.end_date = dates.endDate;\n//            vm.end_date_min = dates.endDateMin;\n        }\n    };\n\n    vm.dateResetShow = function(date){\n        return rentDate.makeMomentDate(new Date()) == rentDate.makeMomentDate(date);\n    };\n\n    vm.resetDate = function(control) {\n        vm.dates = rentDate.resetDate(vm.dates, control);\n        vm.oneDay = undefined;\n        console.log('resetDate | ', vm.dates);\n    };\n\n    // function to handle submitting the form\n    vm.submitQuote = function() {\n        console.log('submit', vm.quoteData);\n\n        vm.quoteData.end_date = rentDate.compareDates(vm.quoteData.start_date, vm.quoteData.end_date);\n\n        vm.quoteData.start_date = rentDate.makeMomentDate(vm.quoteData.start_date);\n        vm.quoteData.end_date = rentDate.makeMomentDate(vm.quoteData.end_date);\n\n//        if (vm.quoteData.start_date > vm.quoteData.end_date)\n//        {\n//            vm.quoteData.end_date = vm.quoteData.start_date + 1day;\n//            vm.end_date_min = vm.quoteData.start_date;\n//        }\n//\n//        if (vm.quoteData.start_date < vm.quoteData.end_date)\n//        {\n//            vm.quoteData.end_date = vm.quoteData.start_date;\n//            vm.end_date_min = vm.quoteData.start_date;\n//        }\n\n        // save the quote. pass in quote data from the form\n        // use the function we created in our service\n        rentQuote.save(vm.quoteData)\n            .then(function(data) {\n            console.log('success', data);\n            // if successful, we'll need to refresh the quote list\n//                Quote.get()\n//                    .success(function(getData) {\n//                        vm.quotes = getData;\n//                        vm.loading = false;\n//                    });\n\n        }, function(data) {\n            console.log('error ', data);\n        });\n\n        vm.quoteData.start_date = new Date();\n        vm.quoteData.end_date = new Date();\n\n    };\n\n    vm.specificEnquiry = function($event, control) {\n      console.log('specificEnquiry clicked', vm.specificEnquiryVal);\n    };\n\n    vm.generalEnquiry = function($event, control) {\n      console.log('generalEnquiry clicked', vm.specificEnquiryVal);\n    };\n\n    vm.enquiryType = function(val){\n\n      switch (val) {\n        case 'general':\n          vm.generalEnquiryVal = true;\n          vm.specificEnquiryVal = false;\n          console.log(vm.generalEnquiryVal, vm.specificEnquiryVal);\n          break;\n        case 'specific':\n          vm.generalEnquiryVal = false;\n          vm.specificEnquiryVal = true;\n          console.log(vm.generalEnquiryVal, vm.specificEnquiryVal);\n          break;\n\n        default:\n\n        }\n      vm.quoteData.specificEnquiryVal = val;\n      console.log(vm.quoteData.generalEnqMonth);\n    };\n\n\n\n}]);\n","angular.module('datesService', [])\n\n.factory('rentDate', function($http) {\n\n    var dateify = function(dateObj){\n        angular.forEach(dateObj, function(value, key){\n            if (value !== undefined)\n            {\n                dateObj[key] = new Date(value);\n            }\n        });\n        return dateObj;\n    }\n\n    Date.prototype.addDays = function(date, days)\n    {\n        var dat = new Date(date);\n        dat.setDate(dat.getDate() + days);\n        return dat;\n    }\n\n    return {\n\n        today : new Date(),\n\n        checkDate : function(date) {\n            var inDate = date;\n        },\n\n        makeMomentDate : function(date) {\n            return moment(date).format(\"YYYY-MM-DD\");\n        },\n\n        resetDate : function(dates, control) {\n\n            dates[control] = new Date();\n\n            if (control === 'start_date')\n            {\n                dates.end_date_min = dates.end_date_min.addDays(new Date(), 1);\n            }\n\n            return dates;\n        },\n\n        compareDates : {\n            start : function(dates) {\n//                start_date = dates.start_date;\n//                end_date = dates.end_date;\n\n//                console.log('compareDates | start | start_date > start_date init -> ', start_date);\n//                var temp = start_date;\n                if (dates.start_date > dates.end_date)\n                {\n//                    console.log('compareDates -> start : | start_date > end_date b4 -> ', dates);\n                    dates.end_date = dates.start_date.addDays(dates.start_date, 1);\n//                    console.log('compareDates -> start : | start_date > end_date -> 4f ', dates);\n//                    dates.start_date = start_date;\n                    // back to date obj\n//                    dates.end_date = new Date(dates.end_date);\n//                    dates.end_date_min = dates.end_date;\n\n//                    dates = dateify(dates);\n                    console.log('compareDates -> start : | start_date > end_date -> b4 return ', dates);\n\n//                    dates.end_date_min = start_date;\n                    return dates;\n                }\n                else if (dates.start_date <= dates.end_date)\n                {\n                    console.log('compareDates -> start : | start_date <= end_date init -> ', dates.start_date, dates.end_date);\n//                    dates.end_date = start_date.setDate(start_date.getDate() + 1);\n//                    end_date = start_date.setDate(start_date.getDate() + 1);\n                    // back to date obj\n//                    end_date = new Date(end_date);\n                    console.log('compareDates -> start : | start_date <= end_date -> b4 ', dates);\n                    dates.end_date_min = dates.start_date.addDays(dates.start_date, 1);\n//                    dates = dateify(dates);\n                    console.log('compareDates -> start : | start_date <= end_date -> 4f ', dates);\n\n                    return dates;                }\n                },\n            end : function(start_date, end_date) {\n\n                var temp = start_date;\n\n                console.log('compareDates | end | start_date > start_date init -> ', start_date, end_date);\n\n                console.log('compareDates -> end : | start_date > start_date b4 -> ', start_date);\n                dates.end_date.setDate(start_date.getDate() + 1);\n                // back to date obj\n                dates.end_date = new Date(dates.end_date);\n                console.log('compareDates -> end : | start_date > end_date -> 4f ', end_date);\n\n                return dates;\n\n            }\n        },\n//            if (start_date < end_date)\n//            {\n//                console.log('compareDates | start_date < end_date -> ');\n//                end_date = start_date;\n//                return end_date;\n//            }\n\n        // get all the quotes\n        get : function() {\n            return $http.get('/api/quote');\n        },\n\n        // save a quote (pass in quote data)\n        save : function(data) {\n            return $http({\n                method: 'POST',\n                url: '/quote',\n                headers: {\n                    'Content-Type' : 'application/x-www-form-urlencoded'\n                },\n                data: $.param(data)\n            });\n        },\n\n        // destroy a quote\n        destroy : function(id) {\n            return $http.delete('/api/quote/' + id);\n        }\n    }\n\n});","angular.module('quotesService', [])\n\n.factory('rentQuote', function($http) {\n\n    return {\n//        // get all the quotes\n//        get : function() {\n//            return $http.get('/quote');\n//        },\n\n        // save a quote (pass in quote data)\n        save : function(data) {\n\n            return $http({\n                method: 'POST',\n                url: '/quote',\n                headers: { 'Content-Type' : 'application/x-www-form-urlencoded' },\n                data: $.param(data)\n            });\n        },\n\n        // destroy a quote\n        destroy : function(id) {\n            return $http.delete('/quote' + id);\n        }\n    }\n\n});"]}